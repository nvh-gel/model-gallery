plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.5'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.google.cloud.tools.jib' version '3.3.1'
    id 'jacoco'
}

group = 'com.eden'
sourceCompatibility = '17'

def versions = new Properties()
file("versions.properties").withReader {
    versions.load(it)
}

static def getDate() {
    def date = new Date()
    return date.format('yyyyMMdd')
}

version = versions.version + '.' + getDate()

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

jar {
    enabled = false
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compileClasspath
}

springBoot {
    buildInfo()
}

jib {
    from {
        image = 'ibm-semeru-runtimes:open-17-jre'
    }
    to {
        image = 'nvhien2703/model-gallery-api'
        tags = [version, 'latest'] as List<String>
        auth {
            username = System.getenv('DOCKER_USERNAME')
            password = System.getenv('DOCKER_PASSWORD')
        }
    }
    container {
        mainClass = "${group}.gallery.ModelGalleryApplication"
        ports = ['8080']
        environment = [
                'VERSION'         : version,
                'APPLICATION_PORT': '8080',
                'DEVELOPMENT_MODE': 'false'
        ] as Map<String, String>
    }
}

jacoco {
    toolVersion = versions.jacoco
}

repositories {
    mavenCentral()
    maven {
        url = uri("https://maven.pkg.github.com/nvh-gel/registry")
        credentials {
            username = System.getenv("REGISTRY_USER")
            password = System.getenv("REGISTRY_TOKEN")
        }
    }
}

dependencies {
    implementation "com.eden:common-libs:${versions.common}"
    implementation "com.eden:common-data:${versions.common}"
    implementation "com.eden:common-nosql:${versions.common}"
    implementation "com.eden:common-queue:${versions.common}"
    implementation "com.eden:common-mapper:${versions.common}"
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.mapstruct:mapstruct:${versions.mapstruct}"
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation "io.jsonwebtoken:jjwt-api:${versions.jjwt}"
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation "com.google.code.gson:gson:${versions.gson}"
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    compileOnly 'org.projectlombok:lombok'

    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${versions.jjwt}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${versions.jjwt}"

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.mapstruct:mapstruct-processor:${versions.mapstruct}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.h2database:h2'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring30x:${versions.flapdoodle}"
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    finalizedBy jacocoTestCoverageVerification, jacocoTestReport
    jacoco {
        excludes = [
                'com.eden.gallery.mapper.*Impl',
                'com.eden.gallery.ModelGalleryApplication',
        ]
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/com/eden/gallery/mapper/*Impl.class',
                    '**/com/eden/gallery/ModelGalleryApplication.class',
            ])
        })
    }
    violationRules {
        rule {
            limit {
                minimum = 0.30
            }
        }
    }
}

jacocoTestReport {
    dependsOn test
    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/com/eden/gallery/mapper/*Impl.class',
                    '**/com/eden/gallery/ModelGalleryApplication.class',
            ])
        })
    }
}
